name: workflow

on:
    push:
        branches:
            - main
        paths-ignore:
            - 'README.md'

jobs:
    integration:
      name: Continuous Integration
      runs-on: ubuntu-latest
      steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Lint code
        uses: echo "Linting repository"

      - name: Run unit tests Code
        uses: echo "Running unit tests"


    build-and-push-ecr-image:
      name:  Continuous Delivery
      needs: integration
      runs-on: ubuntu-latest
      steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Utilities Code
        runs:  |
          sudo apt-get update
          sudo apt-get install -y jq unzip

      - name: Configure AWS credentials Code
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-REGION: ${{ secrets.AWS_ACCESS_KEY_ID }}

      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REGPOSITY: ${{ secrets.ECR_REPOSITY_NAME }}
          IMAGE_TAG: latest
        run: |
        # Build a docker container and 
        # push it to ECR so that it can
        # be deployed to ECS

          docker build -t $ECR_REGISTRY/$ECR_REGPOSITY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REGPOSITY:$IMAGE_TAG
          echo "::set-output name=image:: $ECR_REGISTRY/$ECR_REGPOSITY:$IMAGE_TAG"


    Continuous-Deployment:
      needs: build-and-push-ecr-image-ec2
      runson: self-hosted
      steps:
        - name: Checkout
          uses: actions/checkout@v3

        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v1
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-REGION: ${{ secrets.AWS_REGION }}

        - name: Login to AWS ECR
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@v1

        - name: Pull latest image
          run: |
            docker pull ${{secrets.AWS_ECR_LOGIN_URI}}/${{secrets.ECR_REPOSITY_NAME }}

        - name: Run dopcker Image to serve users
          run: | 
            docker run -d -p 8080:8080 --ipc="host" --name=mltest -e 'AWS_ACCESS_KEY_ID=${{screts.AWS_SECRET_ACCESS_KEY}}' -e 'AWS_REGION=${{secrets.AWS_REGION }}' ${{secrets.AWS_ECR_LOGIN_URI}}/${{secrets.ECR_REPOSITY_NAME}}:latest
        - name: Clean prewvious image and containers
          run: | 
            docker system prune -f






      



        


      



